// Test script for AI Expense Assistant
const aiService = require('./frontend/src/services/aiService.js');

console.log('üß™ Testing AI Expense Assistant\n');

// Mock user and sites data
const mockUser = {
  _id: 'user123',
  name: 'Sumit',
  role: 'submitter',
  site: {
    _id: 'site123',
    name: 'Rohini',
    code: 'ROHINI'
  }
};

const mockSites = [
  {
    _id: 'site123',
    name: 'Rohini',
    code: 'ROHINI'
  },
  {
    _id: 'site456',
    name: 'Mumbai',
    code: 'MUMBAI'
  },
  {
    _id: 'site789',
    name: 'Delhi',
    code: 'DELHI'
  }
];

// Test cases
const testCases = [
  '‚Çπ1,200 taxi expense for Delhi site',
  '‚Çπ500 fuel expense for Rohini',
  '‚Çπ800 lunch expense yesterday',
  '‚Çπ2000 travel expense for Mumbai site today',
  '‚Çπ150 office supplies',
  '‚Çπ3000 hotel accommodation for Delhi',
  '‚Çπ750 maintenance expense',
  '‚Çπ1200 taxi fare',
  '‚Çπ450 food expense',
  '‚Çπ1800 travel expense tomorrow'
];

async function testAIExtraction() {
  console.log('1Ô∏è‚É£ Testing AI Expense Data Extraction\n');
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`Test ${i + 1}: "${testCase}"`);
    
    try {
      const result = await aiService.extractExpenseData(testCase, mockUser, mockSites);
      
      if (result) {
        console.log('‚úÖ Extracted Data:');
        console.log(`   üí∞ Amount: ‚Çπ${result.amount}`);
        console.log(`   üìÇ Category: ${result.category}`);
        console.log(`   üè¢ Site: ${result.siteName}`);
        console.log(`   üìÖ Date: ${result.date}`);
        console.log(`   üéØ Confidence: ${result.confidence}%`);
        console.log(`   üìù Title: ${result.title}`);
        console.log(`   üìÑ Description: ${result.description.substring(0, 100)}...`);
      } else {
        console.log('‚ùå No data extracted');
      }
    } catch (error) {
      console.log('‚ùå Error:', error.message);
    }
    
    console.log('');
  }
}

function testSuggestions() {
  console.log('2Ô∏è‚É£ Testing AI Suggestions\n');
  
  const suggestions = aiService.getSuggestions(mockUser, mockSites);
  console.log('üí° Generated Suggestions:');
  suggestions.forEach((suggestion, index) => {
    console.log(`   ${index + 1}. ${suggestion}`);
  });
  console.log('');
}

function testValidation() {
  console.log('3Ô∏è‚É£ Testing Data Validation\n');
  
  const testData = [
    {
      amount: 1200,
      category: 'Vehicle KM',
      siteName: 'Rohini',
      description: 'Taxi expense'
    },
    {
      amount: 0,
      category: 'Food',
      siteName: 'Mumbai',
      description: 'Lunch expense'
    },
    {
      amount: 500,
      category: 'Fuel',
      siteName: null,
      description: 'Fuel expense'
    }
  ];
  
  testData.forEach((data, index) => {
    console.log(`Test ${index + 1}:`);
    console.log('   Data:', data);
    
    const validation = aiService.validateExpenseData(data);
    console.log(`   Valid: ${validation.isValid}`);
    
    if (!validation.isValid) {
      console.log('   Errors:', validation.errors);
    }
    console.log('');
  });
}

function testAmountExtraction() {
  console.log('4Ô∏è‚É£ Testing Amount Extraction\n');
  
  const amountTests = [
    '‚Çπ1,200 taxi expense',
    '‚Çπ500.50 fuel expense',
    '1200 rupees taxi',
    '500 rs fuel',
    '‚Çπ1,200.75 travel expense',
    '1200 INR taxi',
    '‚Çπ500 taxi fare',
    '500 dollars taxi',
    '500 euros taxi'
  ];
  
  amountTests.forEach((test, index) => {
    console.log(`Test ${index + 1}: "${test}"`);
    const amount = aiService.extractAmount(test);
    console.log(`   Extracted Amount: ${amount}`);
    console.log('');
  });
}

function testCategoryExtraction() {
  console.log('5Ô∏è‚É£ Testing Category Extraction\n');
  
  const categoryTests = [
    '‚Çπ500 taxi expense',
    '‚Çπ800 fuel expense',
    '‚Çπ1200 food expense',
    '‚Çπ2000 travel expense',
    '‚Çπ300 office supplies',
    '‚Çπ1500 maintenance expense',
    '‚Çπ1000 accommodation expense',
    '‚Çπ750 miscellaneous expense'
  ];
  
  categoryTests.forEach((test, index) => {
    console.log(`Test ${index + 1}: "${test}"`);
    const category = aiService.extractCategory(test.toLowerCase());
    console.log(`   Extracted Category: ${category}`);
    console.log('');
  });
}

// Run all tests
async function runAllTests() {
  try {
    await testAIExtraction();
    testSuggestions();
    testValidation();
    testAmountExtraction();
    testCategoryExtraction();
    
    console.log('üéâ All AI Assistant tests completed!');
    console.log('\nüìù Summary:');
    console.log('‚úÖ AI-powered expense data extraction');
    console.log('‚úÖ Natural language processing');
    console.log('‚úÖ Voice input support');
    console.log('‚úÖ Smart suggestions');
    console.log('‚úÖ Data validation');
    console.log('‚úÖ Confidence scoring');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// Run the tests
runAllTests();
