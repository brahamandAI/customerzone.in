// Test script for Hindi AI Expense Assistant
console.log('üß™ Testing Hindi AI Expense Assistant\n');

// Mock AI Service with Hindi support
class AIService {
  constructor() {
    this.categoryKeywords = {
      'Vehicle KM': [
        'taxi', 'cab', 'uber', 'ola', 'vehicle', 'car', 'transport', 'auto', 'rickshaw',
        '‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä', '‡§ï‡•à‡§¨', '‡§ë‡§ü‡•ã', '‡§∞‡§ø‡§ï‡•ç‡§∂‡§æ', '‡§ó‡§æ‡§°‡§º‡•Ä', '‡§µ‡§æ‡§π‡§®', '‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§', '‡§™‡§∞‡§ø‡§µ‡§π‡§®'
      ],
      'Fuel': [
        'fuel', 'petrol', 'diesel', 'gas', 'cng', 'lpg',
        '‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤', '‡§°‡•Ä‡§ú‡§≤', '‡§ó‡•à‡§∏', '‡§∏‡•Ä‡§è‡§®‡§ú‡•Ä', '‡§è‡§≤‡§™‡•Ä‡§ú‡•Ä', '‡§à‡§Ç‡§ß‡§®'
      ],
      'Food': [
        'food', 'lunch', 'dinner', 'breakfast', 'meal', 'restaurant', 'cafe', 'snack', 'tea', 'coffee',
        '‡§ñ‡§æ‡§®‡§æ', '‡§≤‡§Ç‡§ö', '‡§°‡§ø‡§®‡§∞', '‡§®‡§æ‡§∂‡•ç‡§§‡§æ', '‡§≠‡•ã‡§ú‡§®', '‡§∞‡•á‡§∏‡•ç‡§§‡§∞‡§æ‡§Ç', '‡§ï‡•à‡§´‡•á', '‡§ö‡§æ‡§Ø', '‡§ï‡•â‡§´‡•Ä', '‡§∏‡•ç‡§®‡•à‡§ï'
      ],
      'Travel': [
        'travel', 'flight', 'train', 'bus', 'hotel', 'accommodation', 'lodging', 'airfare',
        '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ', '‡§´‡•ç‡§≤‡§æ‡§á‡§ü', '‡§ü‡•ç‡§∞‡•á‡§®', '‡§¨‡§∏', '‡§π‡•ã‡§ü‡§≤', '‡§Ü‡§µ‡§æ‡§∏', '‡§ò‡§∞', '‡§π‡§µ‡§æ‡§à ‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ'
      ]
    };

    this.amountPatterns = [
      /‚Çπ\s*(\d+(?:,\d+)*(?:\.\d{2})?)/i,
      /(\d+(?:,\d+)*(?:\.\d{2})?)\s*(?:rupees?|rs?|inr)/i,
      /(\d+(?:,\d+)*(?:\.\d{2})?)\s*‚Çπ/i,
      /(\d+(?:,\d+)*(?:\.\d{2})?)\s*(?:‡§∞‡•Å‡§™‡§Ø‡•á|‡§∞‡•Å‡§™‡§Ø‡§æ|‡§∞‡•Å)/i,
      /(\d+(?:,\d+)*(?:\.\d{2})?)\s*(?:‡§π‡§ú‡§º‡§æ‡§∞|‡§π‡§ú‡§æ‡§∞)/i
    ];

    this.datePatterns = {
      'today': 0,
      'yesterday': -1,
      'tomorrow': 1,
      '‡§Ü‡§ú': 0,
      '‡§ï‡§≤': -1,
      '‡§™‡§∞‡§∏‡•ã‡§Ç': -2,
      '‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§ï‡§≤': 1,
      '‡§¶‡§ø‡§®': 0
    };
  }

  extractAmount(input) {
    for (const pattern of this.amountPatterns) {
      const match = input.match(pattern);
      if (match) {
        const amountStr = match[1] || match[2];
        const amount = parseFloat(amountStr.replace(/,/g, ''));
        if (!isNaN(amount) && amount > 0) {
          return amount;
        }
      }
    }
    return null;
  }

  extractCategory(input) {
    for (const [category, keywords] of Object.entries(this.categoryKeywords)) {
      if (keywords.some(keyword => input.includes(keyword))) {
        return category;
      }
    }
    return 'Miscellaneous';
  }

  extractDate(input) {
    for (const [keyword, daysOffset] of Object.entries(this.datePatterns)) {
      if (input.includes(keyword)) {
        const date = new Date();
        date.setDate(date.getDate() + daysOffset);
        return date.toISOString().split('T')[0];
      }
    }
    return new Date().toISOString().split('T')[0];
  }

  async extractExpenseData(input, user, sites) {
    try {
      const lowerInput = input.toLowerCase();
      
      const amount = this.extractAmount(input);
      const category = this.extractCategory(lowerInput);
      const date = this.extractDate(lowerInput);
      
      // Mock site info
      const siteInfo = { siteName: 'Rohini', siteId: 'site123' };
      
      let confidence = 0;
      if (amount) confidence += 30;
      if (category && category !== 'Miscellaneous') confidence += 25;
      if (siteInfo.siteName) confidence += 25;
      if (input.length > 10) confidence += 10;
      if (input.length > 20) confidence += 10;
      
      if (amount && siteInfo.siteName) {
        return {
          amount,
          category,
          siteName: siteInfo.siteName,
          siteId: siteInfo.siteId,
          date,
          title: input,
          description: input,
          confidence: Math.min(confidence, 100)
        };
      }
      
      return null;
    } catch (error) {
      console.error('Error in AI expense extraction:', error);
      return null;
    }
  }
}

// Create AI service instance
const aiService = new AIService();

// Mock user and sites data
const mockUser = {
  _id: 'user123',
  name: 'Sumit',
  role: 'submitter',
  site: {
    _id: 'site123',
    name: 'Rohini',
    code: 'ROHINI'
  }
};

const mockSites = [
  {
    _id: 'site123',
    name: 'Rohini',
    code: 'ROHINI'
  }
];

// Hindi test cases
const hindiTestCases = [
  '‚Çπ1,200 ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä ‡§ñ‡§∞‡•ç‡§ö ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§∏‡§æ‡§á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è',
  '‚Çπ500 ‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ñ‡§∞‡•ç‡§ö ‡§∞‡•ã‡§π‡§ø‡§£‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è',
  '‚Çπ800 ‡§≤‡§Ç‡§ö ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§≤ ‡§ï‡§æ',
  '‚Çπ2000 ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ñ‡§∞‡•ç‡§ö ‡§Æ‡•Å‡§Ç‡§¨‡§à ‡§∏‡§æ‡§á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§ú',
  '‚Çπ150 ‡§∏‡•ç‡§ü‡•á‡§∂‡§®‡§∞‡•Ä ‡§ñ‡§∞‡•ç‡§ö',
  '‚Çπ3000 ‡§π‡•ã‡§ü‡§≤ ‡§ñ‡§∞‡•ç‡§ö ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è',
  '‚Çπ750 ‡§Æ‡§∞‡§Æ‡•ç‡§Æ‡§§ ‡§ñ‡§∞‡•ç‡§ö',
  '‚Çπ1200 ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä ‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ',
  '‚Çπ450 ‡§ñ‡§æ‡§®‡§æ ‡§ñ‡§∞‡•ç‡§ö',
  '‚Çπ1800 ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ñ‡§∞‡•ç‡§ö ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ï‡§≤ ‡§ï‡§æ'
];

async function testHindiAIExtraction() {
  console.log('1Ô∏è‚É£ Testing Hindi AI Expense Data Extraction\n');
  
  for (let i = 0; i < hindiTestCases.length; i++) {
    const testCase = hindiTestCases[i];
    console.log(`Test ${i + 1}: "${testCase}"`);
    
    try {
      const result = await aiService.extractExpenseData(testCase, mockUser, mockSites);
      
      if (result) {
        console.log('‚úÖ Extracted Data:');
        console.log(`   üí∞ Amount: ‚Çπ${result.amount}`);
        console.log(`   üìÇ Category: ${result.category}`);
        console.log(`   üè¢ Site: ${result.siteName}`);
        console.log(`   üìÖ Date: ${result.date}`);
        console.log(`   üéØ Confidence: ${result.confidence}%`);
        console.log(`   üìù Title: ${result.title}`);
      } else {
        console.log('‚ùå No data extracted');
      }
    } catch (error) {
      console.log('‚ùå Error:', error.message);
    }
    
    console.log('');
  }
}

function testHindiAmountExtraction() {
  console.log('2Ô∏è‚É£ Testing Hindi Amount Extraction\n');
  
  const hindiAmountTests = [
    '‚Çπ1,200 ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ500.50 ‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ñ‡§∞‡•ç‡§ö',
    '1200 ‡§∞‡•Å‡§™‡§Ø‡•á ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä',
    '500 ‡§∞‡•Å ‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤',
    '‚Çπ1,200.75 ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ñ‡§∞‡•ç‡§ö',
    '1200 ‡§∞‡•Å‡§™‡§Ø‡§æ ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä',
    '‚Çπ500 ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä ‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ',
    '2 ‡§π‡§ú‡§æ‡§∞ ‡§∞‡•Å‡§™‡§Ø‡•á ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ñ‡§∞‡•ç‡§ö'
  ];
  
  hindiAmountTests.forEach((test, index) => {
    console.log(`Test ${index + 1}: "${test}"`);
    const amount = aiService.extractAmount(test);
    console.log(`   Extracted Amount: ${amount}`);
    console.log('');
  });
}

function testHindiCategoryExtraction() {
  console.log('3Ô∏è‚É£ Testing Hindi Category Extraction\n');
  
  const hindiCategoryTests = [
    '‚Çπ500 ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ800 ‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ1200 ‡§ñ‡§æ‡§®‡§æ ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ2000 ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ300 ‡§∏‡•ç‡§ü‡•á‡§∂‡§®‡§∞‡•Ä ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ1500 ‡§Æ‡§∞‡§Æ‡•ç‡§Æ‡§§ ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ1000 ‡§π‡•ã‡§ü‡§≤ ‡§ñ‡§∞‡•ç‡§ö',
    '‚Çπ750 ‡§Ö‡§®‡•ç‡§Ø ‡§ñ‡§∞‡•ç‡§ö'
  ];
  
  hindiCategoryTests.forEach((test, index) => {
    console.log(`Test ${index + 1}: "${test}"`);
    const category = aiService.extractCategory(test.toLowerCase());
    console.log(`   Extracted Category: ${category}`);
    console.log('');
  });
}

function testHindiDateExtraction() {
  console.log('4Ô∏è‚É£ Testing Hindi Date Extraction\n');
  
  const hindiDateTests = [
    '‚Çπ500 ‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ñ‡§∞‡•ç‡§ö ‡§Ü‡§ú',
    '‚Çπ800 ‡§≤‡§Ç‡§ö ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§≤',
    '‚Çπ2000 ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ñ‡§∞‡•ç‡§ö ‡§™‡§∞‡§∏‡•ã‡§Ç',
    '‚Çπ1500 ‡§π‡•ã‡§ü‡§≤ ‡§ñ‡§∞‡•ç‡§ö ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ï‡§≤ ‡§ï‡§æ',
    '‚Çπ1200 ‡§ü‡•à‡§ï‡•ç‡§∏‡•Ä ‡§ñ‡§∞‡•ç‡§ö ‡§¶‡§ø‡§® ‡§ï‡§æ'
  ];
  
  hindiDateTests.forEach((test, index) => {
    console.log(`Test ${index + 1}: "${test}"`);
    const date = aiService.extractDate(test.toLowerCase());
    console.log(`   Extracted Date: ${date}`);
    console.log('');
  });
}

// Run all tests
async function runAllHindiTests() {
  try {
    await testHindiAIExtraction();
    testHindiAmountExtraction();
    testHindiCategoryExtraction();
    testHindiDateExtraction();
    
    console.log('üéâ All Hindi AI Assistant tests completed!');
    console.log('\nüìù Summary:');
    console.log('‚úÖ Hindi language support');
    console.log('‚úÖ Hindi amount extraction');
    console.log('‚úÖ Hindi category classification');
    console.log('‚úÖ Hindi date parsing');
    console.log('‚úÖ Hindi voice recognition ready');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// Run the tests
runAllHindiTests();
